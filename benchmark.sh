#!/bin/bash

# ========================================
# CONFIGURA√á√ïES DO BENCHMARK
# ========================================
# Edite estas vari√°veis para personalizar o benchmark:
NUM_PROCESSES=14           # N√∫mero de processos MPI para teste paralelo
TEST_SONGS=10000000          # N√∫mero de m√∫sicas para teste (amostra)
PARALLEL_TIMEOUT=600      # Timeout para execu√ß√£o paralela (segundos)
SINGLE_TIMEOUT=600       # Timeout para execu√ß√£o single thread (segundos)
# ========================================

echo "üèÅ BENCHMARK: Paralelo vs Single Thread üèÅ"
echo "=========================================="
echo "Configura√ß√µes:"
echo "- Processos MPI: $NUM_PROCESSES"
echo "- M√∫sicas de teste: $TEST_SONGS"
echo "- Timeout paralelo: ${PARALLEL_TIMEOUT}s"
echo "- Timeout single: ${SINGLE_TIMEOUT}s"
echo ""

export PATH=/usr/lib64/openmpi/bin:$PATH

echo "Compilando programa principal..."
make clean
make main

if [ $? -eq 0 ]; then
    echo "‚úÖ Compila√ß√£o bem-sucedida!"
    echo ""
    
    # Criar um CSV de teste com apenas TEST_SONGS m√∫sicas
    echo "Criando CSV de teste com $TEST_SONGS m√∫sicas..."
    head -$((TEST_SONGS + 1)) golden_music.csv > test_music.csv
    
    # Modificar temporariamente o c√≥digo para usar o arquivo de teste
    sed -i 's/golden_music.csv/test_music.csv/g' main.c
    make main
    
    echo ""
    echo "üöÄ TESTE 1: Execu√ß√£o PARALELA ($NUM_PROCESSES processos MPI)"
    echo "============================================================"
    echo "Configura√ß√µes:"
    echo "- Processos: $NUM_PROCESSES MPI"
    echo "- M√∫sicas: $TEST_SONGS (amostra para teste r√°pido)"
    echo "- Vers√£o: I/O OPTIMIZED"
    echo ""
    
    echo "Iniciando execu√ß√£o paralela..."
    echo "Tempo de in√≠cio: $(date '+%H:%M:%S')"
    echo ""
    
    # Medir tempo de execu√ß√£o paralela
    time_start_parallel=$(date +%s.%N)
    timeout ${PARALLEL_TIMEOUT}s mpirun -np $NUM_PROCESSES --oversubscribe ./main > parallel_output.txt 2>&1
    parallel_exit_code=$?
    time_end_parallel=$(date +%s.%N)
    
    echo ""
    echo "Tempo de fim: $(date '+%H:%M:%S')"
    if [ $parallel_exit_code -eq 124 ]; then
        echo "‚è∞ Execu√ß√£o paralela interrompida por timeout (${PARALLEL_TIMEOUT}s)"
    else
        echo "‚úÖ Execu√ß√£o paralela conclu√≠da!"
    fi
    echo ""
    
    echo "üêå TESTE 2: Execu√ß√£o SINGLE THREAD (1 processo MPI)"
    echo "=================================================="
    echo "Configura√ß√µes:"
    echo "- Processos: 1 MPI"
    echo "- M√∫sicas: $TEST_SONGS (amostra para teste r√°pido)"
    echo "- Vers√£o: I/O OPTIMIZED"
    echo ""
    
    echo "Iniciando execu√ß√£o single thread..."
    echo "Tempo de in√≠cio: $(date '+%H:%M:%S')"
    echo ""
    
    # Medir tempo de execu√ß√£o single thread
    time_start_single=$(date +%s.%N)
    timeout ${SINGLE_TIMEOUT}s mpirun -np 1 ./main > single_output.txt 2>&1
    single_exit_code=$?
    time_end_single=$(date +%s.%N)
    
    echo ""
    echo "Tempo de fim: $(date '+%H:%M:%S')"
    if [ $single_exit_code -eq 124 ]; then
        echo "‚è∞ Execu√ß√£o single thread interrompida por timeout (${SINGLE_TIMEOUT}s)"
    else
        echo "‚úÖ Execu√ß√£o single thread conclu√≠da!"
    fi
    echo ""
    
    # Calcular tempos
    parallel_time=$(echo "$time_end_parallel - $time_start_parallel" | bc -l)
    single_time=$(echo "$time_end_single - $time_start_single" | bc -l)
    
    if (( $(echo "$parallel_time > 0" | bc -l) )) && (( $(echo "$single_time > 0" | bc -l) )); then
        speedup=$(echo "scale=2; $single_time / $parallel_time" | bc -l)
        efficiency=$(echo "scale=1; $speedup / $NUM_PROCESSES * 100" | bc -l)
        
        # Resultados
        echo "üìä RESULTADOS DO BENCHMARK"
        echo "=========================="
        echo "‚è±Ô∏è  Tempo Paralelo ($NUM_PROCESSES processos): $(echo "scale=2; $parallel_time" | bc) segundos"
        echo "‚è±Ô∏è  Tempo Single Thread (1 processo): $(echo "scale=2; $single_time" | bc) segundos"
        echo "üöÄ Speedup: $(echo "scale=2; $speedup" | bc)x mais r√°pido"
        echo "üìà Efici√™ncia: $(echo "scale=1; $efficiency" | bc)%"
        echo ""
        
        # An√°lise de performance
        if (( $(echo "$speedup > 8" | bc -l) )); then
            echo "üéâ EXCELENTE: Speedup muito alto! Paraleliza√ß√£o muito eficiente."
        elif (( $(echo "$speedup > 5" | bc -l) )); then
            echo "‚úÖ BOM: Speedup significativo. Paraleliza√ß√£o eficiente."
        elif (( $(echo "$speedup > 2" | bc -l) )); then
            echo "‚ö†Ô∏è  MODERADO: Speedup moderado. Pode haver overhead de comunica√ß√£o."
        else
            echo "‚ùå BAIXO: Speedup baixo. Paraleliza√ß√£o pode n√£o estar otimizada."
        fi
    else
        echo "‚ùå N√£o foi poss√≠vel calcular speedup (tempos inv√°lidos)"
    fi
    
    echo ""
    echo "üîß OTIMIZA√á√ïES APLICADAS:"
    echo "========================="
    echo "1. I/O Otimizado: Buffer de 1MB para leitura de arquivo"
    echo "2. Chunks de 100 linhas: Processa m√∫ltiplas linhas por vez"
    echo "3. LLM Reduzido: Apenas 20 m√∫sicas para classifica√ß√£o de sentimento"
    echo "4. Parsing Otimizado: Busca manual de delimitadores"
    echo "5. Memory Safe: Libera mem√≥ria imediatamente ap√≥s uso"
    echo ""
    
    echo "üìã LOGS DE EXECU√á√ÉO"
    echo "==================="
    echo "Log paralelo (√∫ltimas 5 linhas):"
    tail -5 parallel_output.txt
    echo ""
    echo "Log single thread (√∫ltimas 5 linhas):"
    tail -5 single_output.txt
    
    # Restaurar arquivo original
    sed -i 's/test_music.csv/golden_music.csv/g' main.c
    rm -f test_music.csv
    
else
    echo "‚ùå Erro na compila√ß√£o!"
    exit 1
fi